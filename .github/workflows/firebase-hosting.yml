name: Analyze, Build, Deploy, and Release

on:
  push:
    branches:
      - main

jobs:
  semantic-pull-request:
    name: "Semantic"
    uses: VeryGoodOpenSource/very_good_workflows/.github/workflows/semantic_pull_request.yml@v1

  build:
    name: Build
    needs: [semantic-pull-request]
    runs-on: ubuntu-latest
    steps:
      - name: üìö Git Checkout
        uses: actions/checkout@v3
      - name: üê¶ Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "stable"
          flutter-version: 3.22.2
      - name: üì¶ Install Dependencies
        run: |
          flutter pub get
      - name: üõ†Ô∏è Build the application
        run: flutter build web --dart-define=RECAPTCHA_V3_SITE_KEY=${{ secrets.RECAPTCHA_V3_SITE_KEY }}
      - name: ‚¨áÔ∏è Archive Production Artifact
        uses: actions/upload-artifact@master
        with:
          name: build
          path: build/web

  deploy:
    name: "Deploy"
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: üìö Checkout repo
        uses: actions/checkout@v3
      - name: ‚¨áÔ∏è Download Artifact
        uses: actions/download-artifact@master
        with:
          name: build
          path: build/web
      - name: üéØ Deploy to firebase
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: "${{ secrets.GITHUB_TOKEN }}"
          firebaseServiceAccount: "${{ secrets.FIREBASE_SERVICE_ACCOUNT_DANCE_CLUB_COMUNA_8 }}"
          channelId: live
          projectId: dance-club-comuna-8

  release:
    name: "Create Release"
    runs-on: ubuntu-latest
    needs: [build, deploy]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Create Release Draft
        uses: release-drafter/release-drafter@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create and Push Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release version from the draft
          latest_version=$(curl -sH "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
          # Create a new git tag for the version
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          git tag $latest_version
          # Push the new tag to the repository
          git push origin $latest_version
